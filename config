#!/usr/bin/env bash

set -euo pipefail

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly STOW_DIR="$SCRIPT_DIR/stow"
readonly TARGET_DIR="$HOME"

# Script options
BACKUP_MODE=false
PKG=""

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

# Show usage information
show_usage() {
    cat << EOF
Usage: $0 [OPTION]

Deploy dotfiles using GNU Stow for the specified platform.

Options:
  --os=PLATFORM   Deploy dotfiles for specified platform (mac, omarchy)
  --pkg=PACKAGE   Deploy only the specified package
  --backup       Backup existing configs before overwriting
  -h, --help     Show this help message

Examples:
  $0 --os=mac              # Deploy all packages for macOS
  $0 --os=mac --pkg=ghostty   # Deploy only ghostty package for macOS
  $0 --os=omarchy --backup    # Deploy for Arch Linux with backup
EOF
}

# Backup existing config
backup_config() {
    local path="$1"
    local backup_dir="$HOME/.config/dotfiles-backup/$(date +%Y%m%d_%H%M%S)"
    
    if [[ -e "$path" ]]; then
        mkdir -p "$backup_dir"
        local backup_path="$backup_dir/$(basename "$path")"
        log_info "Backing up: $path -> $backup_path"
        if [[ "$DRY_RUN" == false ]]; then
            cp -r "$path" "$backup_path"
        fi
    fi
}

# Remove file with logging
remove() {
    local file_path="$1"
    local package_name="$2"
    
    # Skip if PKG is specified and doesn't match
    if [[ -n "$PKG" && "$PKG" != "$package_name" ]]; then
        return 0
    fi
    
    if [[ -f "$file_path" ]]; then
        log_info "Removing $file_path"
        rm -f "$file_path"
    elif [[ -d "$file_path" ]]; then
        log_info "Removing directory $file_path"
        rm -rf "$file_path"
    else
        log_info "Skipping $file_path (not found)"
    fi
}

# Deploy a package by stowing
deploy() {
    local package_name="$1"
    
    # Skip if PKG is specified and doesn't match
    if [[ -n "$PKG" && "$PKG" != "$package_name" ]]; then
        return 0
    fi
    
    log_info "Linking $package_name package"
    stow --dir="$STOW_DIR" --target="$TARGET_DIR" "$package_name"
    log_success "Deployed $package_name"
}

# Deploy common packages shared across all platforms
deploy_common_packages() {
    log_info "Deploying common packages..."
 
    # Git configuration
    remove "$HOME/.gitignore" "git"
    remove "$HOME/.config/git" "git"
    deploy "git"
    
    # Zsh configuration  
    remove "$HOME/.zshrc" "zsh"
    remove "$HOME/.zsh" "zsh"
    deploy "zsh"
    touch "$HOME/.zsh/config/env.zsh"
    
    # Neovim configuration
    remove "$HOME/.config/nvim" "neovim"
    remove "$HOME/.local/share/nvim/lazy" "neovim"
    deploy "neovim"
    
    # OpenCode configuration
    remove "$HOME/.config/opencode" "opencode"
    deploy "opencode"
    
    # Scripts
    remove "$HOME/.local/bin" "scripts"
    deploy "scripts"
    
    # Alacritty terminal
    remove "$HOME/.config/alacritty" "alacritty"
    deploy "alacritty"
 
    # Ghostty configuration
    remove "$HOME/.config/ghostty" "ghostty"
    deploy "ghostty"

    # Tmux configuration
    remove "$HOME/.tmux.conf" "tmux"
    deploy "tmux"

    # remove "$HOME/.rubocop.yml" "ruby"
    # deploy "ruby"

    # remove "$HOME/.config/lazygit" "lazygit"
    # deploy "lazygit"
}

# Deploy platform-specific packages for macOS
deploy_mac_packages() {
    log_info "Deploying macOS-specific packages..."
    
    # Aerospace window manager
    remove "$HOME/.config/aerospace" "aerospace"
    deploy "aerospace"
    
    # macOS-specific zsh config (includes .zprofile)
    remove "$HOME/.zprofile" "zsh-mac"
    deploy "zsh-mac"
}

# Deploy platform-specific packages for Arch Linux
deploy_omarchy_packages() {
    log_info "Deploying Arch Linux-specific packages..."

    # Hyprland window manager (selective files only)
    remove "$HOME/.config/hypr/autostart.conf" "hypr"
    remove "$HOME/.config/hypr/bindings.conf" "hypr"
    remove "$HOME/.config/hypr/envs.conf" "hypr"
    remove "$HOME/.config/hypr/input.conf" "hypr"
    remove "$HOME/.config/hypr/looknfeel.conf" "hypr"
    remove "$HOME/.config/hypr/monitors.conf" "hypr"
    deploy "hypr"

    # Waybar status bar
    # remove "$HOME/.config/waybar" "waybar"
    # deploy "waybar"
}

# Main deployment function
deploy_dotfiles() {
    local platform="$1"
    
    log_info "Starting dotfiles deployment for platform: $platform"
    
    
    # Deploy platform-specific packages
    case "$platform" in
        mac)
            deploy_common_packages
            deploy_mac_packages
            ;;
        omarchy)
            deploy_common_packages
            deploy_omarchy_packages
            ;;
        *)
            log_error "Unknown platform: $platform"
            return 1
            ;;
    esac
    
    log_success "Dotfiles deployment completed successfully!"
}

# Parse command line arguments
parse_arguments() {
    local platform=""
    
    if [[ $# -eq 0 ]]; then
        log_error "No OS specified"
        show_usage
        exit 1
    fi
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --os=*)
                platform="${1#*=}"
                shift
                ;;
            --pkg=*)
                PKG="${1#*=}"
                shift
                ;;
            --backup)
                BACKUP_MODE=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    if [[ -z "$platform" ]]; then
        log_error "No OS specified"
        show_usage
        exit 1
    fi
    
    if [[ "$BACKUP_MODE" == true ]]; then
        log_info "Backup mode enabled - existing configs will be backed up"
    fi
    
    deploy_dotfiles "$platform"
}

# Main execution
main() {
    # Check if stow is installed
    if ! command -v stow &> /dev/null; then
        log_error "GNU Stow is not installed. Please install it first."
        exit 1
    fi
    
    # Check if we're in the right directory
    if [[ ! -d "$STOW_DIR" ]]; then
        log_error "Stow directory not found: $STOW_DIR"
        log_error "Please run this script from the dotfiles repository root."
        exit 1
    fi
    
    parse_arguments "$@"
}

# Run main function with all arguments
main "$@"
