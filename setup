#!/usr/bin/env bash

# Mac setup is working
# Arch setup should be adjusted to work with omarchy
# There is an old file ./_setup_arch.sh which serves a similar purpose, but should be removed in the future

set -euo pipefail

# Configuration
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly STOW_DIR="$SCRIPT_DIR/stow"
readonly TARGET_DIR="$HOME"

# Script options
BACKUP_MODE=false

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

# Show usage information
show_usage() {
    cat << EOF
Usage: $0 [OPTION]

Deploy dotfiles using GNU Stow for the specified platform.

Options:
  --os=PLATFORM   Deploy dotfiles for specified platform (mac, arch)
  --backup       Backup existing configs before overwriting
  -h, --help     Show this help message

Examples:
  $0 --os=mac              # Deploy for macOS
  $0 --os=arch --backup    # Deploy for Arch Linux with backup
EOF
}

# Backup existing config
backup_config() {
    local path="$1"
    local backup_dir="$HOME/.config/dotfiles-backup/$(date +%Y%m%d_%H%M%S)"
    
    if [[ -e "$path" ]]; then
        mkdir -p "$backup_dir"
        local backup_path="$backup_dir/$(basename "$path")"
        log_info "Backing up: $path -> $backup_path"
        if [[ "$DRY_RUN" == false ]]; then
            cp -r "$path" "$backup_path"
        fi
    fi
}

# Deploy a package by removing existing config and stowing
deploy_package() {
    local package_name="$1"
    shift
    local config_paths=("$@")
    
    for path in "${config_paths[@]}"; do
        if [[ -f "$path" ]]; then
            log_info "Removing $path"
            rm -f "$path"
        elif [[ -d "$path" ]]; then
            log_info "Removing $path/"
            rm -rf "$path"
        else
            log_info "Skipping removing $path (not found)"
        fi
    done
    log_info "Linking $package_name package"
    stow --dir="$STOW_DIR" --target="$TARGET_DIR" "$package_name"
    log_success "Updating $package_name config done"
}

# Deploy common packages shared across all platforms
deploy_common_packages() {
    log_info "Deploying common packages..."
    
    deploy_package "git" "$HOME/.gitignore" "$HOME/.config/git"
    
    deploy_package "zsh" "$HOME/.zshrc" "$HOME/.zsh"
    
    # Neovim configuration
    deploy_package "nvim" "$HOME/.config/nvim"
    
    # OpenCode configuration
    deploy_package "opencode" "$HOME/.config/opencode"
    
    # Scripts
    deploy_package "scripts" "$HOME/.local/bin"
    
    # Alacritty terminal
    deploy_package "alacritty" "$HOME/.config/alacritty"
    
    # Tmux configuration
    deploy_package "tmux" "$HOME/.tmux.conf" "$HOME/.tmux"

    deploy_package "ruby" "$HOME/.ruby"

    deploy_package "lazygit" "$HOME/.config/lazygit"
}

# Deploy platform-specific packages for macOS
deploy_mac_packages() {
    log_info "Deploying macOS-specific packages..."
    
    # Aerospace window manager
    deploy_package "aerospace" "$HOME/.config/aerospace"
    
    # macOS-specific zsh config (includes .zprofile)
    deploy_package "zsh-mac" "$HOME/.zprofile"
}

# Deploy platform-specific packages for Arch Linux
deploy_arch_packages() {
    log_info "Deploying Arch Linux-specific packages..."

    # Hyprland window manager
    deploy_package "hypr" "$HOME/.config/hypr"

    # Waybar status bar
    deploy_package "waybar" "$HOME/.config/waybar"
}

# Main deployment function
deploy_dotfiles() {
    local platform="$1"
    
    log_info "Starting dotfiles deployment for platform: $platform"
    
    
    # Deploy platform-specific packages
    case "$platform" in
        mac)
            deploy_common_packages
            deploy_mac_packages
            ;;
        arch)
            deploy_common_packages
            deploy_arch_packages
            ;;
        *)
            log_error "Unknown platform: $platform"
            return 1
            ;;
    esac
    
    log_success "Dotfiles deployment completed successfully!"
}

# Parse command line arguments
parse_arguments() {
    local platform=""
    
    if [[ $# -eq 0 ]]; then
        log_error "No OS specified"
        show_usage
        exit 1
    fi
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --os=*)
                platform="${1#*=}"
                shift
                ;;
            --backup)
                BACKUP_MODE=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    if [[ -z "$platform" ]]; then
        log_error "No OS specified"
        show_usage
        exit 1
    fi
    
    if [[ "$BACKUP_MODE" == true ]]; then
        log_info "Backup mode enabled - existing configs will be backed up"
    fi
    
    deploy_dotfiles "$platform"
}

# Main execution
main() {
    # Check if stow is installed
    if ! command -v stow &> /dev/null; then
        log_error "GNU Stow is not installed. Please install it first."
        exit 1
    fi
    
    # Check if we're in the right directory
    if [[ ! -d "$STOW_DIR" ]]; then
        log_error "Stow directory not found: $STOW_DIR"
        log_error "Please run this script from the dotfiles repository root."
        exit 1
    fi
    
    parse_arguments "$@"
}

# Run main function with all arguments
main "$@"
